
from collections import Counter

def comparar_diccionarios_con_valores_repetidos(dic1, dic2):
    claves_valores_demas = {}
    claves_valores_faltantes = {}
    
    claves_todas = set(dic1.keys()).union(dic2.keys())

    for clave in claves_todas:
        valores1 = dic1.get(clave, [])
        valores2 = dic2.get(clave, [])

        c1 = Counter(valores1)

        c2 = Counter(valores2)

        diferencia_demas = c1 - c2  # valores que sobran en dic1
        diferencia_faltantes = c2 - c1  # valores que faltan en dic1

        if diferencia_demas:
            claves_valores_demas[clave] = list(diferencia_demas.elements())
        if diferencia_faltantes:
            claves_valores_faltantes[clave] = list(diferencia_faltantes.elements())

    return {
        "Claves_Valor_DeMas": claves_valores_demas,
        "Cantidad_Valor_DeMas": sum(len(v) for v in claves_valores_demas.values()),
        "Claves_Valor_Faltantes": claves_valores_faltantes,
        "Cantidad_Valor_Faltantes": sum(len(v) for v in claves_valores_faltantes.values())
    }
********************************
resultado = comparar_diccionarios_con_valores_repetidos(dato_dic, base_dic)












































def parsear_lista(texto):
    if not isinstance(texto, str) or not texto.strip().startswith("["):
        return []
    try:
        return ast.literal_eval(texto)
    except:
        return []

dato_lista = parsear_lista(raw_dato)
base_lista = parsear_lista(raw_base)


import pandas as pd
import ast

def convertir_a_diccionario(lista_anidada):
    """
    Convierte [["clave", val1, val2], ...] en {"clave": [val1, val2]}
    """
    dic = {}
    for item in lista_anidada:
        if isinstance(item, list) and len(item) >= 2:
            clave = item[0]
            valores = item[1:]
            dic[clave] = valores
    return dic

def analizar_vs_base(base_lista, objetivo_lista):
    dict_base = convertir_a_diccionario(base_lista)
    dict_objetivo = convertir_a_diccionario(objetivo_lista)

    claves_base = set(dict_base.keys())
    claves_comparado = set(dict_objetivo.keys())

    claves_sobrantes = claves_comparado - claves_base
    claves_faltantes = claves_base - claves_comparado

    detalles_sobrantes = {clave: dict_objetivo[clave] for clave in claves_sobrantes}
    detalles_faltantes = {clave: dict_base[clave] for clave in claves_faltantes}

    cantidad_sobrantes = sum(len(v) for v in detalles_sobrantes.values())
    cantidad_faltantes = sum(len(v) for v in detalles_faltantes.values())

    return {
        "Claves_Valor_DeMas": str(detalles_sobrantes),
        "Cantidad_Valor_DeMas": cantidad_sobrantes,
        "Claves_Valor_Faltantes": str(detalles_faltantes),
        "Cantidad_Valor_Faltantes": cantidad_faltantes
    }

# ---------------------------
# CONFIGURACIÓN
# ---------------------------
archivo = "datos.xlsx"               # Nombre de tu archivo de entrada
columna_datos = "Datos"             # Columna con los datos a evaluar
columna_base = "Base"               # Columna con el diccionario base por fila
archivo_salida = "resultado_analisis.xlsx"

# ---------------------------
# PROCESAMIENTO
# ---------------------------

df = pd.read_excel(archivo)

# Inicializamos columnas vacías
df["Claves_Valor_DeMas"] = ""
df["Cantidad_Valor_DeMas"] = ""
df["Claves_Valor_Faltantes"] = ""
df["Cantidad_Valor_Faltantes"] = ""

# Procesamos fila por fila
for i in df.index:
    raw_dato = df.at[i, columna_datos]
    raw_base = df.at[i, columna_base]

    try:
        dato_lista = ast.literal_eval(raw_dato) if isinstance(raw_dato, str) else []
        base_lista = ast.literal_eval(raw_base) if isinstance(raw_base, str) else []

        resultado = analizar_vs_base(base_lista, dato_lista)

    except Exception as e:
        resultado = {
            "Claves_Valor_DeMas": f"Error: {e}",
            "Cantidad_Valor_DeMas": "",
            "Claves_Valor_Faltantes": "",
            "Cantidad_Valor_Faltantes": ""
        }

    # Escribimos en la misma fila
    for clave, valor in resultado.items():
        df.at[i, clave] = valor

# Guardamos en un nuevo archivo Excel
df.to_excel(archivo_salida, index=False)
print(f"✅ Archivo guardado como '{archivo_salida}'")
